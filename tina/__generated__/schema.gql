# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  indexPage(relativePath: String): IndexPage!
  indexPageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: IndexPageFilter): IndexPageConnection!
  aboutPage(relativePath: String): AboutPage!
  aboutPageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AboutPageFilter): AboutPageConnection!
  blogs(relativePath: String): Blogs!
  blogsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogsFilter): BlogsConnection!
  site(relativePath: String): Site!
  siteConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SiteFilter): SiteConnection!
}

input DocumentFilter {
  indexPage: IndexPageFilter
  aboutPage: AboutPageFilter
  blogs: BlogsFilter
  site: SiteFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = IndexPage | AboutPage | Blogs | Site | Folder

type IndexPageForm {
  placeholder: String
  buttonText: String
  text: String
}

type IndexPage implements Node & Document {
  header: String
  description: String
  image: String
  PreviewVideo: String
  form: IndexPageForm
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input IndexPageFormFilter {
  placeholder: StringFilter
  buttonText: StringFilter
  text: StringFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input IndexPageFilter {
  header: StringFilter
  description: StringFilter
  image: ImageFilter
  PreviewVideo: StringFilter
  form: IndexPageFormFilter
  body: RichTextFilter
}

type IndexPageConnectionEdges {
  cursor: String!
  node: IndexPage
}

type IndexPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [IndexPageConnectionEdges]
}

type AboutPageButton {
  text: String
  link: String
}

type AboutPage implements Node & Document {
  header: String
  button: AboutPageButton
  SatisfiedClients: Float
  ActiveEngagement: Float
  SuccessProjects: Float
  AwardsWinning: Float
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AboutPageButtonFilter {
  text: StringFilter
  link: StringFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input AboutPageFilter {
  header: StringFilter
  button: AboutPageButtonFilter
  SatisfiedClients: NumberFilter
  ActiveEngagement: NumberFilter
  SuccessProjects: NumberFilter
  AwardsWinning: NumberFilter
  body: RichTextFilter
}

type AboutPageConnectionEdges {
  cursor: String!
  node: AboutPage
}

type AboutPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AboutPageConnectionEdges]
}

type Blogs implements Node & Document {
  title: String!
  publishDate: String
  image: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BlogsFilter {
  title: StringFilter
  publishDate: DatetimeFilter
  image: ImageFilter
  body: RichTextFilter
}

type BlogsConnectionEdges {
  cursor: String!
  node: Blogs
}

type BlogsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogsConnectionEdges]
}

type Site implements Node & Document {
  siteName: String
  description: String
  favicon: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SiteFilter {
  siteName: StringFilter
  description: StringFilter
  favicon: ImageFilter
}

type SiteConnectionEdges {
  cursor: String!
  node: Site
}

type SiteConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SiteConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateIndexPage(relativePath: String!, params: IndexPageMutation!): IndexPage!
  createIndexPage(relativePath: String!, params: IndexPageMutation!): IndexPage!
  updateAboutPage(relativePath: String!, params: AboutPageMutation!): AboutPage!
  createAboutPage(relativePath: String!, params: AboutPageMutation!): AboutPage!
  updateBlogs(relativePath: String!, params: BlogsMutation!): Blogs!
  createBlogs(relativePath: String!, params: BlogsMutation!): Blogs!
  updateSite(relativePath: String!, params: SiteMutation!): Site!
  createSite(relativePath: String!, params: SiteMutation!): Site!
}

input DocumentUpdateMutation {
  indexPage: IndexPageMutation
  aboutPage: AboutPageMutation
  blogs: BlogsMutation
  site: SiteMutation
  relativePath: String
}

input DocumentMutation {
  indexPage: IndexPageMutation
  aboutPage: AboutPageMutation
  blogs: BlogsMutation
  site: SiteMutation
}

input IndexPageFormMutation {
  placeholder: String
  buttonText: String
  text: String
}

input IndexPageMutation {
  header: String
  description: String
  image: String
  PreviewVideo: String
  form: IndexPageFormMutation
  body: JSON
}

input AboutPageButtonMutation {
  text: String
  link: String
}

input AboutPageMutation {
  header: String
  button: AboutPageButtonMutation
  SatisfiedClients: Float
  ActiveEngagement: Float
  SuccessProjects: Float
  AwardsWinning: Float
  body: JSON
}

input BlogsMutation {
  title: String
  publishDate: String
  image: String
  body: JSON
}

input SiteMutation {
  siteName: String
  description: String
  favicon: String
}

schema {
  query: Query
  mutation: Mutation
}
