//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  indexPage: IndexPage;
  indexPageConnection: IndexPageConnection;
  aboutPage: AboutPage;
  aboutPageConnection: AboutPageConnection;
  blogs: Blogs;
  blogsConnection: BlogsConnection;
  site: Site;
  siteConnection: SiteConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryIndexPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryIndexPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<IndexPageFilter>;
};


export type QueryAboutPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAboutPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AboutPageFilter>;
};


export type QueryBlogsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogsFilter>;
};


export type QuerySiteArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySiteConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteFilter>;
};

export type DocumentFilter = {
  indexPage?: InputMaybe<IndexPageFilter>;
  aboutPage?: InputMaybe<AboutPageFilter>;
  blogs?: InputMaybe<BlogsFilter>;
  site?: InputMaybe<SiteFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = IndexPage | AboutPage | Blogs | Site | Folder;

export type IndexPageForm = {
  __typename?: 'IndexPageForm';
  placeholder?: Maybe<Scalars['String']['output']>;
  buttonText?: Maybe<Scalars['String']['output']>;
  text?: Maybe<Scalars['String']['output']>;
};

export type IndexPage = Node & Document & {
  __typename?: 'IndexPage';
  header?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  PreviewVideo?: Maybe<Scalars['String']['output']>;
  form?: Maybe<IndexPageForm>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type IndexPageFormFilter = {
  placeholder?: InputMaybe<StringFilter>;
  buttonText?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type IndexPageFilter = {
  header?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  PreviewVideo?: InputMaybe<StringFilter>;
  form?: InputMaybe<IndexPageFormFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type IndexPageConnectionEdges = {
  __typename?: 'IndexPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<IndexPage>;
};

export type IndexPageConnection = Connection & {
  __typename?: 'IndexPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<IndexPageConnectionEdges>>>;
};

export type AboutPageButton = {
  __typename?: 'AboutPageButton';
  text?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
};

export type AboutPage = Node & Document & {
  __typename?: 'AboutPage';
  header?: Maybe<Scalars['String']['output']>;
  button?: Maybe<AboutPageButton>;
  SatisfiedClients?: Maybe<Scalars['Float']['output']>;
  ActiveEngagement?: Maybe<Scalars['Float']['output']>;
  SuccessProjects?: Maybe<Scalars['Float']['output']>;
  AwardsWinning?: Maybe<Scalars['Float']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type AboutPageButtonFilter = {
  text?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type AboutPageFilter = {
  header?: InputMaybe<StringFilter>;
  button?: InputMaybe<AboutPageButtonFilter>;
  SatisfiedClients?: InputMaybe<NumberFilter>;
  ActiveEngagement?: InputMaybe<NumberFilter>;
  SuccessProjects?: InputMaybe<NumberFilter>;
  AwardsWinning?: InputMaybe<NumberFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type AboutPageConnectionEdges = {
  __typename?: 'AboutPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<AboutPage>;
};

export type AboutPageConnection = Connection & {
  __typename?: 'AboutPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<AboutPageConnectionEdges>>>;
};

export type Blogs = Node & Document & {
  __typename?: 'Blogs';
  title: Scalars['String']['output'];
  publishDate?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BlogsFilter = {
  title?: InputMaybe<StringFilter>;
  publishDate?: InputMaybe<DatetimeFilter>;
  image?: InputMaybe<ImageFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type BlogsConnectionEdges = {
  __typename?: 'BlogsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Blogs>;
};

export type BlogsConnection = Connection & {
  __typename?: 'BlogsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<BlogsConnectionEdges>>>;
};

export type Site = Node & Document & {
  __typename?: 'Site';
  siteName?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  favicon?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type SiteFilter = {
  siteName?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  favicon?: InputMaybe<ImageFilter>;
};

export type SiteConnectionEdges = {
  __typename?: 'SiteConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Site>;
};

export type SiteConnection = Connection & {
  __typename?: 'SiteConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SiteConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateIndexPage: IndexPage;
  createIndexPage: IndexPage;
  updateAboutPage: AboutPage;
  createAboutPage: AboutPage;
  updateBlogs: Blogs;
  createBlogs: Blogs;
  updateSite: Site;
  createSite: Site;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateIndexPageArgs = {
  relativePath: Scalars['String']['input'];
  params: IndexPageMutation;
};


export type MutationCreateIndexPageArgs = {
  relativePath: Scalars['String']['input'];
  params: IndexPageMutation;
};


export type MutationUpdateAboutPageArgs = {
  relativePath: Scalars['String']['input'];
  params: AboutPageMutation;
};


export type MutationCreateAboutPageArgs = {
  relativePath: Scalars['String']['input'];
  params: AboutPageMutation;
};


export type MutationUpdateBlogsArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogsMutation;
};


export type MutationCreateBlogsArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogsMutation;
};


export type MutationUpdateSiteArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteMutation;
};


export type MutationCreateSiteArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteMutation;
};

export type DocumentUpdateMutation = {
  indexPage?: InputMaybe<IndexPageMutation>;
  aboutPage?: InputMaybe<AboutPageMutation>;
  blogs?: InputMaybe<BlogsMutation>;
  site?: InputMaybe<SiteMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  indexPage?: InputMaybe<IndexPageMutation>;
  aboutPage?: InputMaybe<AboutPageMutation>;
  blogs?: InputMaybe<BlogsMutation>;
  site?: InputMaybe<SiteMutation>;
};

export type IndexPageFormMutation = {
  placeholder?: InputMaybe<Scalars['String']['input']>;
  buttonText?: InputMaybe<Scalars['String']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

export type IndexPageMutation = {
  header?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  PreviewVideo?: InputMaybe<Scalars['String']['input']>;
  form?: InputMaybe<IndexPageFormMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type AboutPageButtonMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type AboutPageMutation = {
  header?: InputMaybe<Scalars['String']['input']>;
  button?: InputMaybe<AboutPageButtonMutation>;
  SatisfiedClients?: InputMaybe<Scalars['Float']['input']>;
  ActiveEngagement?: InputMaybe<Scalars['Float']['input']>;
  SuccessProjects?: InputMaybe<Scalars['Float']['input']>;
  AwardsWinning?: InputMaybe<Scalars['Float']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type BlogsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  publishDate?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type SiteMutation = {
  siteName?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  favicon?: InputMaybe<Scalars['String']['input']>;
};

export type IndexPagePartsFragment = { __typename: 'IndexPage', header?: string | null, description?: string | null, image?: string | null, PreviewVideo?: string | null, body?: any | null, form?: { __typename: 'IndexPageForm', placeholder?: string | null, buttonText?: string | null, text?: string | null } | null };

export type AboutPagePartsFragment = { __typename: 'AboutPage', header?: string | null, SatisfiedClients?: number | null, ActiveEngagement?: number | null, SuccessProjects?: number | null, AwardsWinning?: number | null, body?: any | null, button?: { __typename: 'AboutPageButton', text?: string | null, link?: string | null } | null };

export type BlogsPartsFragment = { __typename: 'Blogs', title: string, publishDate?: string | null, image?: string | null, body?: any | null };

export type SitePartsFragment = { __typename: 'Site', siteName?: string | null, description?: string | null, favicon?: string | null };

export type IndexPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type IndexPageQuery = { __typename?: 'Query', indexPage: { __typename: 'IndexPage', id: string, header?: string | null, description?: string | null, image?: string | null, PreviewVideo?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, form?: { __typename: 'IndexPageForm', placeholder?: string | null, buttonText?: string | null, text?: string | null } | null } };

export type IndexPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<IndexPageFilter>;
}>;


export type IndexPageConnectionQuery = { __typename?: 'Query', indexPageConnection: { __typename?: 'IndexPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'IndexPageConnectionEdges', cursor: string, node?: { __typename: 'IndexPage', id: string, header?: string | null, description?: string | null, image?: string | null, PreviewVideo?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, form?: { __typename: 'IndexPageForm', placeholder?: string | null, buttonText?: string | null, text?: string | null } | null } | null } | null> | null } };

export type AboutPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type AboutPageQuery = { __typename?: 'Query', aboutPage: { __typename: 'AboutPage', id: string, header?: string | null, SatisfiedClients?: number | null, ActiveEngagement?: number | null, SuccessProjects?: number | null, AwardsWinning?: number | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, button?: { __typename: 'AboutPageButton', text?: string | null, link?: string | null } | null } };

export type AboutPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AboutPageFilter>;
}>;


export type AboutPageConnectionQuery = { __typename?: 'Query', aboutPageConnection: { __typename?: 'AboutPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AboutPageConnectionEdges', cursor: string, node?: { __typename: 'AboutPage', id: string, header?: string | null, SatisfiedClients?: number | null, ActiveEngagement?: number | null, SuccessProjects?: number | null, AwardsWinning?: number | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, button?: { __typename: 'AboutPageButton', text?: string | null, link?: string | null } | null } | null } | null> | null } };

export type BlogsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type BlogsQuery = { __typename?: 'Query', blogs: { __typename: 'Blogs', id: string, title: string, publishDate?: string | null, image?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type BlogsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogsFilter>;
}>;


export type BlogsConnectionQuery = { __typename?: 'Query', blogsConnection: { __typename?: 'BlogsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BlogsConnectionEdges', cursor: string, node?: { __typename: 'Blogs', id: string, title: string, publishDate?: string | null, image?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type SiteQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SiteQuery = { __typename?: 'Query', site: { __typename: 'Site', id: string, siteName?: string | null, description?: string | null, favicon?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type SiteConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteFilter>;
}>;


export type SiteConnectionQuery = { __typename?: 'Query', siteConnection: { __typename?: 'SiteConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SiteConnectionEdges', cursor: string, node?: { __typename: 'Site', id: string, siteName?: string | null, description?: string | null, favicon?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const IndexPagePartsFragmentDoc = gql`
    fragment IndexPageParts on IndexPage {
  __typename
  header
  description
  image
  PreviewVideo
  form {
    __typename
    placeholder
    buttonText
    text
  }
  body
}
    `;
export const AboutPagePartsFragmentDoc = gql`
    fragment AboutPageParts on AboutPage {
  __typename
  header
  button {
    __typename
    text
    link
  }
  SatisfiedClients
  ActiveEngagement
  SuccessProjects
  AwardsWinning
  body
}
    `;
export const BlogsPartsFragmentDoc = gql`
    fragment BlogsParts on Blogs {
  __typename
  title
  publishDate
  image
  body
}
    `;
export const SitePartsFragmentDoc = gql`
    fragment SiteParts on Site {
  __typename
  siteName
  description
  favicon
}
    `;
export const IndexPageDocument = gql`
    query indexPage($relativePath: String!) {
  indexPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...IndexPageParts
  }
}
    ${IndexPagePartsFragmentDoc}`;
export const IndexPageConnectionDocument = gql`
    query indexPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: IndexPageFilter) {
  indexPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...IndexPageParts
      }
    }
  }
}
    ${IndexPagePartsFragmentDoc}`;
export const AboutPageDocument = gql`
    query aboutPage($relativePath: String!) {
  aboutPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AboutPageParts
  }
}
    ${AboutPagePartsFragmentDoc}`;
export const AboutPageConnectionDocument = gql`
    query aboutPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AboutPageFilter) {
  aboutPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AboutPageParts
      }
    }
  }
}
    ${AboutPagePartsFragmentDoc}`;
export const BlogsDocument = gql`
    query blogs($relativePath: String!) {
  blogs(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BlogsParts
  }
}
    ${BlogsPartsFragmentDoc}`;
export const BlogsConnectionDocument = gql`
    query blogsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BlogsFilter) {
  blogsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BlogsParts
      }
    }
  }
}
    ${BlogsPartsFragmentDoc}`;
export const SiteDocument = gql`
    query site($relativePath: String!) {
  site(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SiteParts
  }
}
    ${SitePartsFragmentDoc}`;
export const SiteConnectionDocument = gql`
    query siteConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SiteFilter) {
  siteConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SiteParts
      }
    }
  }
}
    ${SitePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      indexPage(variables: IndexPageQueryVariables, options?: C): Promise<{data: IndexPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: IndexPageQueryVariables, query: string}> {
        return requester<{data: IndexPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: IndexPageQueryVariables, query: string}, IndexPageQueryVariables>(IndexPageDocument, variables, options);
      },
    indexPageConnection(variables?: IndexPageConnectionQueryVariables, options?: C): Promise<{data: IndexPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: IndexPageConnectionQueryVariables, query: string}> {
        return requester<{data: IndexPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: IndexPageConnectionQueryVariables, query: string}, IndexPageConnectionQueryVariables>(IndexPageConnectionDocument, variables, options);
      },
    aboutPage(variables: AboutPageQueryVariables, options?: C): Promise<{data: AboutPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutPageQueryVariables, query: string}> {
        return requester<{data: AboutPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutPageQueryVariables, query: string}, AboutPageQueryVariables>(AboutPageDocument, variables, options);
      },
    aboutPageConnection(variables?: AboutPageConnectionQueryVariables, options?: C): Promise<{data: AboutPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutPageConnectionQueryVariables, query: string}> {
        return requester<{data: AboutPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutPageConnectionQueryVariables, query: string}, AboutPageConnectionQueryVariables>(AboutPageConnectionDocument, variables, options);
      },
    blogs(variables: BlogsQueryVariables, options?: C): Promise<{data: BlogsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogsQueryVariables, query: string}> {
        return requester<{data: BlogsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogsQueryVariables, query: string}, BlogsQueryVariables>(BlogsDocument, variables, options);
      },
    blogsConnection(variables?: BlogsConnectionQueryVariables, options?: C): Promise<{data: BlogsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogsConnectionQueryVariables, query: string}> {
        return requester<{data: BlogsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogsConnectionQueryVariables, query: string}, BlogsConnectionQueryVariables>(BlogsConnectionDocument, variables, options);
      },
    site(variables: SiteQueryVariables, options?: C): Promise<{data: SiteQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteQueryVariables, query: string}> {
        return requester<{data: SiteQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteQueryVariables, query: string}, SiteQueryVariables>(SiteDocument, variables, options);
      },
    siteConnection(variables?: SiteConnectionQueryVariables, options?: C): Promise<{data: SiteConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteConnectionQueryVariables, query: string}> {
        return requester<{data: SiteConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteConnectionQueryVariables, query: string}, SiteConnectionQueryVariables>(SiteConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  